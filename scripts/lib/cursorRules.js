"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCursorRulesContent = getCursorRulesContent;
function getCursorRulesContent(projectName, includeWorktree = false) {
    const worktreeSection = includeWorktree
        ? `\n### Git Worktree 管理\n- 新機能開発やバグ修正は原則としてworktreeでブランチを切ってから開始する\n- メインブランチ（main）での直接開発は避ける\n- worktree作成手順：\n  1. \`git worktree add ../feature/機能名 機能名\`\n  2. 開発作業を実施\n  3. 完了後、\`git worktree remove ../feature/機能名\` で削除\n- 複数の機能を並行開発する場合は、それぞれ別のworktreeを使用する`
        : '';
    return `# Cursor Rules - 日本語コミュニケーション設定\n\n## 会話ガイドライン\n- 常に日本語で会話する\n\n## 開発哲学\n\n### テスト駆動開発（TDD）\n- 原則としてテスト駆動開発（TDD）で進める\n- 期待される入出力に基づき、まずテストを作成する\n- 実装コードは書かず、テストのみを用意する\n- テストを実行し、失敗を確認する\n- テストが正しいことを確認できた段階でコミットする\n- その後、テストをパスさせる実装を進める\n- 実装中はテストを変更せず、コードを修正し続ける\n- すべてのテストが通過するまで繰り返す${worktreeSection}\n\n## 言語設定\n- 常に日本語でコミュニケーションを行ってください\n- コードコメントも日本語で記述してください\n- エラーメッセージやログの説明も日本語で行ってください\n\n## コーディングスタイル\n- 変数名や関数名は英語で記述（プログラミングの慣例に従う）\n- コメント、ドキュメント、READMEは日本語で記述\n- コミットメッセージは日本語で記述\n\n## コミュニケーション\n- 技術的な説明は分かりやすい日本語で行ってください\n- 専門用語を使用する場合は、必要に応じて説明を加えてください\n- 質問や確認は日本語で行ってください\n\n## プロジェクト固有の設定\n- このプロジェクトは ${projectName} です\n- 開発環境のセットアップや設定に関する質問は日本語で対応してください\n- ドキュメントの作成や更新も日本語で行ってください\n\n## ファイル命名規則\n- 設定ファイルやドキュメントファイルは日本語名も可\n- ソースコードファイルは英語名で統一\n- ディレクトリ名は英語で統一\n\n## エラーハンドリング\n- エラーメッセージの説明は日本語で行ってください\n- デバッグ情報も日本語で提供してください\n- トラブルシューティングの手順も日本語で説明してください`;
}
