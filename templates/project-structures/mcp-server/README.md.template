# {{PROJECT_NAME}}

> {{PROJECT_DESCRIPTION}}

{{PROJECT_NAME}} は Model Context Protocol (MCP) サーバーの実装です。AI クライアント（Claude等）がツールやリソースにアクセスするための高性能サーバーを提供します。

## 🚀 クイックスタート

### セットアップ
```bash
# 1. 依存関係インストール
npm install

# 2. 環境変数設定
cp .env.example .env

# 3. 開発サーバー起動
npm run dev
```

### 基本的な使用方法
```bash
# ビルド
npm run build

# テスト実行
npm test

# 本番環境起動
npm start
```

## 📚 ドキュメント

詳細なドキュメントは [`docs/`](./docs/) ディレクトリを参照してください：

- **[プロダクト要求仕様書](./docs/PRD.md)** - プロジェクトの要件・目標
- **[開発者ガイド](./docs/README.md)** - 詳細な開発手順・API仕様
- **[アーキテクチャ設計](./docs/ARCHITECTURE.md)** - システム設計・技術仕様
- **[APIリファレンス](./docs/API.md)** - エンドポイント・利用方法

## 🛠️ 開発

- `npm run dev` - 開発モードでサーバー起動（ファイル変更時に自動再起動）
- `npm run build` - TypeScriptをJavaScriptにコンパイル
- `npm run start` - ビルドされたサーバーを起動
- `npm test` - テストを実行
- `npm run lint` - コードの静的解析
- `npm run lint:fix` - リンティングエラーの自動修正

### プロジェクト構造

```
src/
├── index.ts           # メインサーバー実装
├── tools/             # MCPツール実装
│   └── example-tool.ts
├── resources/         # MCPリソース実装
│   └── example-resource.ts
└── utils/
    └── logger.ts      # ログユーティリティ
```

### MCP機能の追加

#### 新しいツールの追加
1. `src/tools/` に新しいツールを実装
2. `src/index.ts` でツールを登録

#### 新しいリソースの追加
1. `src/resources/` に新しいリソースを実装
2. 必要に応じてリソースハンドラーを追加

## 使用方法

### MCPクライアントでの使用

Claude Codeなどのクライアントで使用する場合：

```json
{
  "mcpServers": {
    "{{PROJECT_NAME}}": {
      "command": "node",
      "args": ["dist/index.js"]
    }
  }
}
```

## ライセンス

MIT