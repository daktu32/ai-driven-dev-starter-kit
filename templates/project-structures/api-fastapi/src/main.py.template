"""
{{PROJECT_NAME}} - FastAPI Application
{{PROJECT_DESCRIPTION}}

Author: {{AUTHOR}}
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import uvicorn

# Pydantic models
class HealthResponse(BaseModel):
    status: str
    message: str
    project: str

class ItemBase(BaseModel):
    name: str
    description: Optional[str] = None

class Item(ItemBase):
    id: int

class ItemCreate(ItemBase):
    pass

# Initialize FastAPI app
app = FastAPI(
    title="{{PROJECT_NAME}}",
    description="{{PROJECT_DESCRIPTION}}",
    version="0.1.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# In-memory storage (replace with database in production)
items_db: List[Item] = [
    Item(id=1, name="Sample Item", description="This is a sample item"),
    Item(id=2, name="Another Item", description="This is another sample item"),
]

# Routes
@app.get("/", response_model=HealthResponse)
async def root():
    """Root endpoint - Health check"""
    return HealthResponse(
        status="success",
        message="{{PROJECT_NAME}} API is running!",
        project="{{PROJECT_NAME}}"
    )

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        message="Service is running properly",
        project="{{PROJECT_NAME}}"
    )

@app.get("/items", response_model=List[Item])
async def get_items():
    """Get all items"""
    return items_db

@app.get("/items/{item_id}", response_model=Item)
async def get_item(item_id: int):
    """Get a specific item by ID"""
    item = next((item for item in items_db if item.id == item_id), None)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    return item

@app.post("/items", response_model=Item)
async def create_item(item: ItemCreate):
    """Create a new item"""
    new_id = max((item.id for item in items_db), default=0) + 1
    new_item = Item(id=new_id, **item.dict())
    items_db.append(new_item)
    return new_item

@app.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: int, item: ItemCreate):
    """Update an existing item"""
    existing_item = next((item for item in items_db if item.id == item_id), None)
    if not existing_item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    existing_item.name = item.name
    existing_item.description = item.description
    return existing_item

@app.delete("/items/{item_id}")
async def delete_item(item_id: int):
    """Delete an item"""
    item_index = next((i for i, item in enumerate(items_db) if item.id == item_id), None)
    if item_index is None:
        raise HTTPException(status_code=404, detail="Item not found")
    
    deleted_item = items_db.pop(item_index)
    return {"message": f"Item '{deleted_item.name}' deleted successfully"}

# Optional: Add more endpoints here
@app.get("/api/info")
async def api_info():
    """Get API information"""
    return {
        "name": "{{PROJECT_NAME}}",
        "description": "{{PROJECT_DESCRIPTION}}",
        "author": "{{AUTHOR}}",
        "version": "0.1.0",
        "endpoints": {
            "health": "/health",
            "items": "/items",
            "docs": "/docs",
            "redoc": "/redoc"
        }
    }

if __name__ == "__main__":
    # Run with: python src/main.py
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )