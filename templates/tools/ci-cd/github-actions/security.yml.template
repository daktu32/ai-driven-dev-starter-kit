name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '{{NODE_VERSION}}'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies (Node.js)
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: npm ci

      - name: Run npm audit
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          npm audit --audit-level=high
          npm audit --json > npm-audit.json || true

      - name: Setup Python
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies (Python)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety

      - name: Run safety scan (Python)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Setup Rust
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        run: cargo install cargo-audit

      - name: Run cargo audit
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        run: |
          cargo audit --json > cargo-audit.json || true
          cargo audit

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-reports
          path: |
            npm-audit.json
            safety-report.json
            cargo-audit.json
          retention-days: 30

  code-scanning:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: |
            ${{ contains('{{PROJECT_TYPE}}', 'rust') && 'cpp' || 'javascript' }}
            ${{ contains('{{PROJECT_TYPE}}', 'fastapi') && 'python' || '' }}
          queries: +security-and-quality

      - name: Setup Node.js (for autobuild)
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies (Node.js)
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: npm ci

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.63.2-rc
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t {{PROJECT_NAME}}:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '{{PROJECT_NAME}}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license checker
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: npm install -g license-checker

      - name: Check licenses (Node.js)
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          npm ci
          license-checker --summary
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' --excludePrivatePackages

      - name: Install pip-licenses
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          pip install pip-licenses

      - name: Check licenses (Python)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          pip-licenses --format=table
          pip-licenses --allow-only='MIT;Apache Software License;BSD License;ISC License'

      - name: Install cargo-license
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        run: cargo install cargo-license

      - name: Check licenses (Rust)
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        run: |
          cargo license
          cargo license --json > licenses.json

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for SECURITY.md
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "⚠️ SECURITY.md not found"
            echo "Consider adding a security policy to your repository"
          else
            echo "✅ SECURITY.md found"
          fi

      - name: Check for .env files in repository
        run: |
          if find . -name ".env*" -not -path "./.git/*" | grep -q .; then
            echo "❌ .env files found in repository:"
            find . -name ".env*" -not -path "./.git/*"
            echo "These should be in .gitignore"
            exit 1
          else
            echo "✅ No .env files found in repository"
          fi

      - name: Check for hardcoded secrets patterns
        run: |
          # Check for common secret patterns
          SECRET_PATTERNS="(password|passwd|secret|key|token|api_key).*=.*['\"][^'\"]{8,}['\"]"
          
          if grep -r -i -E "$SECRET_PATTERNS" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md"; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          else
            echo "✅ No obvious hardcoded secrets detected"
          fi

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scanning, secret-scanning, license-compliance, security-policy-check]
    if: always()
    steps:
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-audit-reports
          path: security-reports
        continue-on-error: true

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Scanning | ${{ needs.code-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Policy | ${{ needs.security-policy-check.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Count failures
          FAILURES=0
          [ "${{ needs.dependency-scan.result }}" != "success" ] && FAILURES=$((FAILURES+1))
          [ "${{ needs.code-scanning.result }}" != "success" ] && FAILURES=$((FAILURES+1))
          [ "${{ needs.secret-scanning.result }}" != "success" ] && FAILURES=$((FAILURES+1))
          [ "${{ needs.license-compliance.result }}" != "success" ] && FAILURES=$((FAILURES+1))
          [ "${{ needs.security-policy-check.result }}" != "success" ] && FAILURES=$((FAILURES+1))
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $FAILURES -eq 0 ]; then
            echo "✅ All security checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ $FAILURES security check(s) failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify security issues
        if: ${{ needs.dependency-scan.result == 'failure' || needs.secret-scanning.result == 'failure' }}
        run: |
          echo "🚨 Security issues detected!"
          echo "Please review the security scan results and address any vulnerabilities."
          # Add notification logic here (Slack, email, etc.)