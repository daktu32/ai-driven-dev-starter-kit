import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
import middy from '@middy/core'
import httpErrorHandler from '@middy/http-error-handler'
import httpCors from '@middy/http-cors'
import { createResponse } from '@/lib/response'
import { logger } from '@/lib/logger'
import { itemService } from '@/lib/itemService'

const deleteItemHandler = async (
  event: APIGatewayProxyEvent
): Promise<APIGatewayProxyResult> => {
  try {
    const itemId = event.pathParameters?.id
    
    if (!itemId) {
      return createResponse(400, {
        error: 'Item ID is required'
      })
    }

    logger.info('Deleting item', { 
      requestId: event.requestContext.requestId,
      itemId
    })

    const success = await itemService.deleteItem(itemId)

    if (!success) {
      return createResponse(404, {
        error: 'Item not found'
      })
    }

    return createResponse(200, {
      message: 'Item deleted successfully'
    })
  } catch (error) {
    logger.error('Failed to delete item', { error })
    
    return createResponse(500, {
      error: 'Failed to delete item'
    })
  }
}

export const handler = middy(deleteItemHandler)
  .use(httpErrorHandler())
  .use(httpCors())