name: MCP Server CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '{{NODE_VERSION}}'
  REGISTRY: npm

jobs:
  quality-checks:
    name: Code Quality & Type Safety
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint check
        run: npm run lint

      - name: TypeScript check
        run: npm run type-check

      - name: Format check
        run: npm run format:check

      - name: MCP schema validation
        run: |
          # Validate MCP server schema compliance
          npm run validate:mcp || echo "MCP validation not configured"

  test-mcp:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run MCP integration tests
        run: |
          # Start MCP server in background
          npm run start:test &
          SERVER_PID=$!
          sleep 5
          
          # Test MCP protocol compliance
          npm run test:mcp-protocol || true
          
          # Test tools and resources
          npm run test:tools || true
          npm run test:resources || true
          
          # Cleanup
          kill $SERVER_PID || true

      - name: Test coverage
        run: npm run test:coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-package:
    name: Build & Package MCP Server
    runs-on: ubuntu-latest
    needs: [quality-checks, test-mcp]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Package for distribution
        run: |
          # Create tarball for npm
          npm pack
          
          # Verify package contents
          tar -tf {{PROJECT_NAME}}-*.tgz

      - name: Test installation
        run: |
          # Test global installation
          PACKAGE_FILE=$(ls {{PROJECT_NAME}}-*.tgz)
          npm install -g $PACKAGE_FILE
          
          # Test MCP server startup
          {{PROJECT_NAME}} --version || echo "Version command not available"
          
          # Cleanup
          npm uninstall -g {{PROJECT_NAME}}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-package
          path: |
            {{PROJECT_NAME}}-*.tgz
            dist/
          retention-days: 7

  security-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          npx audit-ci --config .audit-ci.json || true

      - name: License compliance check
        run: |
          npm install -g license-checker
          license-checker --summary
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --excludePrivatePackages

  publish-staging:
    name: Publish to NPM (Staging)
    runs-on: ubuntu-latest
    needs: [build-package, security-audit]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging-npm
      url: https://www.npmjs.com/package/{{PROJECT_NAME}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: mcp-server-package

      - name: Update version for staging
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          STAGING_VERSION="${CURRENT_VERSION}-beta.${GITHUB_RUN_NUMBER}"
          npm version $STAGING_VERSION --no-git-tag-version

      - name: Publish to npm (beta tag)
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Test published package
        run: |
          # Wait for npm registry propagation
          sleep 30
          
          # Test installation from npm
          npm install -g {{PROJECT_NAME}}@beta
          
          # Test MCP server functionality
          {{PROJECT_NAME}} --version || echo "Version check failed"
          
          # Cleanup
          npm uninstall -g {{PROJECT_NAME}}

  publish-production:
    name: Publish to NPM (Production)
    runs-on: ubuntu-latest
    needs: [build-package, security-audit]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-npm
      url: https://www.npmjs.com/package/{{PROJECT_NAME}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: mcp-server-package

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            {{PROJECT_NAME}}-*.tgz
          generate_release_notes: true

  mcp-compliance-test:
    name: MCP Protocol Compliance
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install MCP testing tools
        run: |
          npm install -g @modelcontextprotocol/inspector || echo "MCP inspector not available"

      - name: Test MCP server compliance
        run: |
          # Start MCP server
          npm run start &
          SERVER_PID=$!
          sleep 5
          
          # Test basic MCP operations
          echo "Testing MCP server capabilities..."
          
          # Test server initialization
          curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{},"clientInfo":{"name":"test-client","version":"1.0.0"}}}' \
            || echo "Direct HTTP test failed"
          
          # Test via stdio (if applicable)
          timeout 10s node -e "
            const { spawn } = require('child_process');
            const server = spawn('node', ['dist/index.js']);
            server.stdin.write(JSON.stringify({
              jsonrpc: '2.0',
              id: 1,
              method: 'initialize',
              params: {
                protocolVersion: '2024-11-05',
                capabilities: {},
                clientInfo: { name: 'test-client', version: '1.0.0' }
              }
            }) + '\n');
            server.stdout.on('data', (data) => {
              console.log('Server response:', data.toString());
              process.exit(0);
            });
            setTimeout(() => process.exit(1), 5000);
          " || echo "Stdio test completed"
          
          # Cleanup
          kill $SERVER_PID || true

  notify-status:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, test-mcp, build-package, security-audit]
    if: always()
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.quality-checks.result }}" = "success" ] && \
             [ "${{ needs.test-mcp.result }}" = "success" ] && \
             [ "${{ needs.build-package.result }}" = "success" ] && \
             [ "${{ needs.security-audit.result }}" = "success" ]; then
            echo "✅ All MCP Server CI checks passed!"
          else
            echo "❌ Some MCP Server CI checks failed"
            echo "Quality: ${{ needs.quality-checks.result }}"
            echo "Tests: ${{ needs.test-mcp.result }}"
            echo "Build: ${{ needs.build-package.result }}"
            echo "Security: ${{ needs.security-audit.result }}"
          fi