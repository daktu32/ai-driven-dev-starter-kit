name: Deploy

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip quality checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '{{NODE_VERSION}}'

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_staging: ${{ steps.conditions.outputs.deploy_staging }}
      deploy_production: ${{ steps.conditions.outputs.deploy_production }}
      skip_checks: ${{ steps.conditions.outputs.skip_checks }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment conditions
        id: conditions
        run: |
          DEPLOY_STAGING="false"
          DEPLOY_PRODUCTION="false"
          SKIP_CHECKS="${{ github.event.inputs.force_deploy || 'false' }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
              DEPLOY_STAGING="true"
            elif [ "${{ github.event.inputs.environment }}" = "production" ]; then
              DEPLOY_PRODUCTION="true"
            fi
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            DEPLOY_STAGING="true"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            DEPLOY_PRODUCTION="true"
          fi
          
          echo "deploy_staging=$DEPLOY_STAGING" >> $GITHUB_OUTPUT
          echo "deploy_production=$DEPLOY_PRODUCTION" >> $GITHUB_OUTPUT
          echo "skip_checks=$SKIP_CHECKS" >> $GITHUB_OUTPUT

      - name: Run quality checks
        if: ${{ steps.conditions.outputs.skip_checks == 'false' }}
        run: |
          # This would typically run the CI pipeline
          echo "Running quality checks..."
          # You can add actual checks here or reference the CI workflow

  build-for-deployment:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: ${{ needs.pre-deploy-checks.outputs.deploy_staging == 'true' || needs.pre-deploy-checks.outputs.deploy_production == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js build
      - name: Setup Node.js
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies (Node.js)
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: npm ci

      - name: Build project (Node.js)
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') && !contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: npm run build
        env:
          NODE_ENV: production

      # Python build
      - name: Setup Python
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies (Python)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image (FastAPI)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        run: |
          docker build -t {{PROJECT_NAME}}:${{ github.sha }} .
          docker save {{PROJECT_NAME}}:${{ github.sha }} > {{PROJECT_NAME}}-image.tar

      # Rust build
      - name: Setup Rust
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        uses: dtolnay/rust-toolchain@stable

      - name: Build project (Rust)
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        run: cargo build --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            dist/
            build/
            .next/
            target/release/
            {{PROJECT_NAME}}-image.tar
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-for-deployment]
    if: ${{ needs.pre-deploy-checks.outputs.deploy_staging == 'true' }}
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.deployment_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      # Next.js deployment to Vercel
      - name: Deploy to Vercel (Staging)
        if: ${{ contains('{{PROJECT_TYPE}}', 'nextjs') }}
        id: vercel-deploy
        run: |
          npx vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
          DEPLOYMENT_URL=$(npx vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --confirm)
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      # FastAPI deployment
      - name: Deploy to staging (FastAPI)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        id: fastapi-deploy
        run: |
          # Example: Deploy to cloud provider
          # docker load < {{PROJECT_NAME}}-image.tar
          # docker tag {{PROJECT_NAME}}:${{ github.sha }} registry.example.com/{{PROJECT_NAME}}:staging
          # docker push registry.example.com/{{PROJECT_NAME}}:staging
          echo "deployment_url=https://{{PROJECT_NAME}}-staging.example.com" >> $GITHUB_OUTPUT
          echo "Deploy FastAPI to staging environment"

      # MCP Server deployment
      - name: Deploy to staging (MCP Server)
        if: ${{ contains('{{PROJECT_TYPE}}', 'mcp-server') }}
        id: mcp-deploy
        run: |
          # Example: Deploy to npm with staging tag
          # npm publish --tag staging
          echo "deployment_url=https://npmjs.com/package/{{PROJECT_NAME}}" >> $GITHUB_OUTPUT
          echo "Deploy MCP Server to staging environment"

      # Rust CLI deployment
      - name: Deploy to staging (Rust CLI)
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        id: rust-deploy
        run: |
          # Example: Upload to staging release
          echo "deployment_url=https://github.com/${{ github.repository }}/releases" >> $GITHUB_OUTPUT
          echo "Deploy Rust CLI to staging environment"

      - name: Set deployment URL
        id: deploy
        run: |
          DEPLOYMENT_URL=""
          if [ -n "${{ steps.vercel-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.vercel-deploy.outputs.deployment_url }}"
          elif [ -n "${{ steps.fastapi-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.fastapi-deploy.outputs.deployment_url }}"
          elif [ -n "${{ steps.mcp-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.mcp-deploy.outputs.deployment_url }}"
          elif [ -n "${{ steps.rust-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.rust-deploy.outputs.deployment_url }}"
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Run deployment tests
        run: |
          # Add deployment verification tests here
          if [ -n "${{ steps.deploy.outputs.deployment_url }}" ]; then
            echo "Testing deployment at: ${{ steps.deploy.outputs.deployment_url }}"
            # Example: curl health check
            # curl -f ${{ steps.deploy.outputs.deployment_url }}/health
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-for-deployment, deploy-staging]
    if: ${{ needs.pre-deploy-checks.outputs.deploy_production == 'true' && (success() || github.event.inputs.force_deploy == 'true') }}
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      # Next.js deployment to Vercel
      - name: Deploy to Vercel (Production)
        if: ${{ contains('{{PROJECT_TYPE}}', 'nextjs') }}
        id: vercel-deploy
        run: |
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
          DEPLOYMENT_URL=$(npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --confirm)
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      # FastAPI deployment
      - name: Deploy to production (FastAPI)
        if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
        id: fastapi-deploy
        run: |
          # Example: Deploy to cloud provider
          # docker load < {{PROJECT_NAME}}-image.tar
          # docker tag {{PROJECT_NAME}}:${{ github.sha }} registry.example.com/{{PROJECT_NAME}}:latest
          # docker push registry.example.com/{{PROJECT_NAME}}:latest
          echo "deployment_url=https://{{PROJECT_NAME}}.example.com" >> $GITHUB_OUTPUT
          echo "Deploy FastAPI to production environment"

      # MCP Server deployment
      - name: Deploy to production (MCP Server)
        if: ${{ contains('{{PROJECT_TYPE}}', 'mcp-server') }}
        id: mcp-deploy
        run: |
          # Example: Publish to npm
          # npm publish
          echo "deployment_url=https://npmjs.com/package/{{PROJECT_NAME}}" >> $GITHUB_OUTPUT
          echo "Deploy MCP Server to production environment"

      # Rust CLI deployment
      - name: Deploy to production (Rust CLI)
        if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
        id: rust-deploy
        run: |
          # Example: Create GitHub release
          echo "deployment_url=https://github.com/${{ github.repository }}/releases" >> $GITHUB_OUTPUT
          echo "Deploy Rust CLI to production environment"

      - name: Set deployment URL
        id: deploy
        run: |
          DEPLOYMENT_URL=""
          if [ -n "${{ steps.vercel-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.vercel-deploy.outputs.deployment_url }}"
          elif [ -n "${{ steps.fastapi-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.fastapi-deploy.outputs.deployment_url }}"
          elif [ -n "${{ steps.mcp-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.mcp-deploy.outputs.deployment_url }}"
          elif [ -n "${{ steps.rust-deploy.outputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.rust-deploy.outputs.deployment_url }}"
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Run production tests
        run: |
          # Add production verification tests here
          if [ -n "${{ steps.deploy.outputs.deployment_url }}" ]; then
            echo "Testing production deployment at: ${{ steps.deploy.outputs.deployment_url }}"
            # Example: comprehensive health checks
            # curl -f ${{ steps.deploy.outputs.deployment_url }}/health
            # Run smoke tests
          fi

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "✅ Staging deployment successful"
          elif [ "${{ needs.deploy-staging.result }}" = "failure" ]; then
            echo "❌ Staging deployment failed"
          fi
          
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "✅ Production deployment successful"
          elif [ "${{ needs.deploy-production.result }}" = "failure" ]; then
            echo "❌ Production deployment failed"
          fi
          
          # Add notification logic here (Slack, Discord, etc.)
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚀 {{PROJECT_NAME}} deployment completed"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}