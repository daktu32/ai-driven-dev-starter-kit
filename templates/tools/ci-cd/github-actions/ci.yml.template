name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '{{NODE_VERSION}}'
  COVERAGE_THRESHOLD: 80

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check
        continue-on-error: true

      - name: Type check
        run: npm run type-check
        if: ${{ contains('{{PROJECT_TYPE}}', 'typescript') || contains('{{PROJECT_TYPE}}', 'nextjs') || contains('{{PROJECT_TYPE}}', 'mcp-server') }}

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Run test coverage
        run: npm run test:coverage

      - name: Coverage threshold check
        run: |
          COVERAGE=$(npm run test:coverage:report 2>/dev/null | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
          echo "Current coverage: $COVERAGE%"
          if [ "${COVERAGE%.*}" -lt "$COVERAGE_THRESHOLD" ]; then
            echo "❌ Coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold $COVERAGE_THRESHOLD%"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/
            .next/
          retention-days: 7

      - name: Verify build size
        run: |
          if [ -d "dist" ]; then
            SIZE=$(du -sh dist/ | cut -f1)
            echo "Build size: $SIZE"
          fi
          if [ -d "build" ]; then
            SIZE=$(du -sh build/ | cut -f1)
            echo "Build size: $SIZE"
          fi
          if [ -d ".next" ]; then
            SIZE=$(du -sh .next/ | cut -f1)
            echo "Build size: $SIZE"
          fi

  # Rust specific job
  build-rust:
    name: Build Rust Project
    runs-on: ubuntu-latest
    if: ${{ contains('{{PROJECT_TYPE}}', 'rust') }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu, x86_64-apple-darwin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: {{PROJECT_NAME}}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/{{PROJECT_NAME}}*

  # Python specific job
  build-python:
    name: Build Python Project
    runs-on: ubuntu-latest
    if: ${{ contains('{{PROJECT_TYPE}}', 'fastapi') }}
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run integration tests
        run: npm run test:integration
        if: ${{ !contains('{{PROJECT_TYPE}}', 'rust') }}

      - name: E2E tests (Next.js)
        run: npx playwright test
        if: ${{ contains('{{PROJECT_TYPE}}', 'nextjs') }}

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    steps:
      - name: Quality Gate Summary
        run: |
          echo "## Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint.result }}" != "success" ] || [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Quality gate failed"
            exit 1
          else
            echo "✅ All quality checks passed"
          fi