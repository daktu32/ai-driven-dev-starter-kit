# PRD (Product Requirements Document) - {{PROJECT_NAME}}

バージョン: 1.0  
作成日: {{DATE}}  
プロジェクトタイプ: {{PROJECT_TYPE}}

## 1. プロダクト概要

### 1.1 プロダクト名
{{PROJECT_NAME}}

### 1.2 プロダクトビジョン
[このプロダクトが目指す世界観や価値を記述]

例: 「開発者がAIと協働して効率的にプロダクト開発できる世界を実現する」

### 1.3 プロダクトミッション  
[このプロダクトが解決する問題や提供する価値を記述]

例: 「複雑な要件定義から実装まで、AIアシスタントがシームレスに支援することで開発サイクルを10倍高速化する」

### 1.4 ターゲットユーザー
- **プライマリーユーザー**: [メインターゲット]
- **セカンダリーユーザー**: [サブターゲット]
- **ユーザーペルソナ**: [具体的なユーザー像]

## 2. 市場分析・競合分析

### 2.1 市場機会
[市場サイズ、成長性、トレンドを記述]

### 2.2 競合分析
| 競合 | 強み | 弱み | 差別化ポイント |
|------|------|------|----------------|
| [競合A] | [強み] | [弱み] | [我々の優位性] |

### 2.3 ポジショニング
[競合に対する我々のポジション]

## 3. ユーザーストーリー・ユースケース

### 3.1 メインユーザーストーリー

**As a** [ユーザータイプ]  
**I want** [やりたいこと]  
**So that** [得たい価値]

#### 例:
- **As a** プロダクトマネージャー  
- **I want** 要件をPRDに記述するだけでプロトタイプが自動生成される  
- **So that** アイデアを素早く検証できる

### 3.2 追加ユーザーストーリー
1. [ユーザーストーリー2]
2. [ユーザーストーリー3]
3. [ユーザーストーリー4]

### 3.3 ユーザージャーニー
```
[初回利用時]
認知 → 興味 → 試用 → 導入 → 継続利用

[日常利用時]  
課題発生 → ツール起動 → 要件入力 → 実装確認 → デプロイ
```

## 4. 機能要件

### 4.1 MVP機能 (必須)

| 機能名 | 説明 | 優先度 | 実装難易度 |
|--------|------|--------|------------|
| [機能1] | [説明] | High | Medium |
| [機能2] | [説明] | High | Low |

### 4.2 フューチャー機能 (将来実装)

| 機能名 | 説明 | 想定リリース |
|--------|------|-------------|
| [機能A] | [説明] | v2.0 |
| [機能B] | [説明] | v3.0 |

### 4.3 機能詳細仕様

#### 4.3.1 [重要機能1]
- **目的**: [機能の目的]
- **入力**: [必要な入力データ]
- **処理**: [主要な処理内容]  
- **出力**: [期待される出力]
- **制約**: [技術的・ビジネス的制約]

#### 4.3.2 [重要機能2]
[同様の構造で記述]

## 5. 非機能要件

### 5.1 パフォーマンス要件
- **レスポンス時間**: [例: API応答時間 < 200ms]
- **スループット**: [例: 1000 req/sec]
- **可用性**: [例: 99.9% uptime]

### 5.2 セキュリティ要件
- **認証**: [認証方式]
- **認可**: [アクセス制御]
- **データ保護**: [暗号化、匿名化]

### 5.3 スケーラビリティ要件
- **ユーザー数**: [想定ユーザー数]
- **データ量**: [想定データサイズ]
- **成長率**: [年間成長予測]

## 6. 技術要件 ({{PROJECT_TYPE}} 固有)

### 6.1 技術スタック
- **フロントエンド**: [例: Next.js, React]
- **バックエンド**: [例: FastAPI, Python]
- **データベース**: [例: PostgreSQL]
- **インフラ**: [例: AWS, Docker]

### 6.2 アーキテクチャ方針
- **設計原則**: [例: マイクロサービス、DDD]
- **データフロー**: [例: REST API, GraphQL]
- **状態管理**: [例: Redux, Zustand]

### 6.3 開発環境・ツール
- **言語・フレームワーク**: [メイン技術]
- **テスト戦略**: [ユニット、E2E、統合テスト]
- **CI/CD**: [デプロイパイプライン]

## 7. UI/UX要件

### 7.1 デザイン原則
- **使いやすさ**: [ユーザビリティ方針]
- **アクセシビリティ**: [WCAG準拠レベル]  
- **レスポンシブ**: [対応デバイス]

### 7.2 画面・機能フロー
```
[主要画面遷移]
ホーム → 機能選択 → 設定入力 → 実行 → 結果確認
```

### 7.3 UI コンポーネント
- **共通コンポーネント**: [ボタン、フォーム、ナビゲーション]
- **特殊コンポーネント**: [プロダクト固有のUI要素]

## 8. データ要件

### 8.1 データモデル
```
[主要エンティティとリレーション]
User → Project → Feature → Implementation
```

### 8.2 データフロー
- **入力データ**: [ユーザーからの入力]
- **処理データ**: [システム内部データ]
- **出力データ**: [ユーザーへの出力]

### 8.3 データガバナンス
- **保存期間**: [データ保持ポリシー]
- **バックアップ**: [バックアップ戦略]
- **プライバシー**: [個人データ取扱い]

## 9. 制約条件・リスク

### 9.1 技術的制約
- [制約1]: [詳細と対応策]
- [制約2]: [詳細と対応策]

### 9.2 ビジネス制約  
- **予算**: [開発予算制限]
- **期間**: [リリース期限]
- **リソース**: [チーム規模制限]

### 9.3 リスク分析
| リスク | 影響度 | 発生確率 | 対応策 |
|--------|--------|----------|--------|
| [リスク1] | High | Medium | [対応策] |
| [リスク2] | Medium | Low | [対応策] |

## 10. 成功指標・KPI

### 10.1 ビジネスKPI
- **ユーザー獲得**: [例: MAU 1000人]
- **利用率**: [例: DAU/MAU > 30%]
- **収益**: [例: MRR $10K]

### 10.2 プロダクトKPI  
- **機能利用率**: [例: 主要機能利用率 > 80%]
- **ユーザー満足度**: [例: NPS > 50]
- **パフォーマンス**: [例: 離脱率 < 5%]

### 10.3 技術KPI
- **可用性**: [例: Uptime > 99.9%]
- **エラー率**: [例: Error Rate < 0.1%]
- **応答速度**: [例: P95 < 500ms]

## 11. ロードマップ・マイルストーン

### 11.1 開発フェーズ
| フェーズ | 期間 | 主要成果物 | 成功条件 |
|----------|------|------------|----------|
| MVP | [期間] | [成果物] | [条件] |
| v1.0 | [期間] | [成果物] | [条件] |
| v2.0 | [期間] | [成果物] | [条件] |

### 11.2 マイルストーン
- **M1**: [マイルストーン1の説明と期限]
- **M2**: [マイルストーン2の説明と期限]
- **M3**: [マイルストーン3の説明と期限]

---

## 付録

### A. 用語集
- **[用語1]**: [定義]
- **[用語2]**: [定義]

### B. 参考資料
- [参考URL1]: [説明]  
- [参考URL2]: [説明]

### C. 変更履歴
| 日付 | バージョン | 変更内容 | 変更者 |
|------|------------|----------|--------|
| {{DATE}} | 1.0 | 初版作成 | [作成者] |

---

**📝 このPRDについて**
- このPRDを完成させた後、Claude Code を起動してください
- Claude に「PRD.mdの内容に基づいてプロジェクトのスケルトンをアレンジして」と指示してください
- Claude が自動的にファイル構造、実装方針、技術選定を最適化します