#!/usr/bin/env node

/**
 * {{PROJECT_NAME}} - MCP Server
 * {{PROJECT_DESCRIPTION}}
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from '@modelcontextprotocol/sdk/types.js';
import { logger } from './utils/logger.js';
import { exampleTool } from './tools/example-tool.js';

/**
 * {{PROJECT_CLASS_NAME}} MCP Server
 */
class {{PROJECT_CLASS_NAME}}Server {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: '{{PROJECT_NAME}}-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupHandlers();
  }

  private setupHandlers(): void {
    // List available tools
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      const tools: Tool[] = [
        {
          name: 'example_tool',
          description: 'Example tool that demonstrates MCP functionality',
          inputSchema: {
            type: 'object',
            properties: {
              message: {
                type: 'string',
                description: 'Message to process',
              },
            },
            required: ['message'],
          },
        },
      ];

      return { tools };
    });

    // Handle tool calls
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'example_tool':
            return await exampleTool(args as any);
          
          default:
            throw new Error(`Unknown tool: ${name}`);
        }
      } catch (error) {
        logger.error(`Tool execution failed: ${error}`);
        throw error;
      }
    });
  }

  async start(): Promise<void> {
    const transport = new StdioServerTransport();
    
    logger.info('Starting {{PROJECT_NAME}} MCP server...');
    
    await this.server.connect(transport);
    
    logger.info('{{PROJECT_NAME}} MCP server started successfully');
  }
}

// Start the server
if (import.meta.url === `file://${process.argv[1]}`) {
  const server = new {{PROJECT_CLASS_NAME}}Server();
  server.start().catch((error) => {
    logger.error('Failed to start server:', error);
    process.exit(1);
  });
}